%---------------------------------------------------------------------------
% System Requirements.
%
%---------------------------------------------------------------------------
 
\section{System Requirements}
\label{sec:SystemRequirements}

This section contains requirements that created system must meet. Requirements listing and description is divided into
two categories - functional and non-functional requirements. Functional requirements describes roughly what user can
do with application - it's functionality. On the other hand - nonfunctional requirements adds constraints to
functional ones, they describe conditions under which application must operate, they specify properties the software
must exhibit\cite{Windle:SoftReq}.

Requirement levels described in the following Requirements specifications using terms such as ``must'', ``must
not'', ``should/shall'' and ``should/shall not'' are to be read with reference to RFC 2119\cite{rfc:2119}.


\subsection{Functional Requirements}
\label{subsec:FunctionalRequirements}

Application should provide to end-user following functionalities:

\begin{itemize}
 \item {\bf Connect to already running JVM process using JMX extension.} 

Application should allow end user to connect to application he or she has previously started. It should be able to
connect to both remote or local process JVM. Additionally, to allow monitoring multiple processes that are running in
long distant (in terms of networking) environment, or to bypass firewall restriction, user should be able to start
remote measuring components, that aggregates result from single measurements and sends them to user in packaged manner.

 \item {\bf Aggregate monitored JVM processes into applications and clusters.}

User should be able to manage existing connections with JVMs in easy fashion, thus should be able to aggregate them
into logical units like clusters (group of nodes) or applications (collection of nodes or clusters that runs same
program)

 \item {\bf Connect to already running OCMG MainSM monitor.}

User should be able to work simultaneously with any JVM or OCM-G based application. To allow this, application must
provide facility to connect to OCMG MainSM monitor. Same requirements related to long distant environments as with JVM
applies here.

 \item {\bf Extract and list resources of given resource.}

Application should be able to visualize all resources of all resources, to which is currently connected.

 \item {\bf List properties of given resource.}

User should be able view all static metadata of given resource, like: host name, os version, JVM version, etc.

 \item {\bf List values of given resource's capabilities at current point of time.}

Per user request, application should provide value of given resource's capability (or multiple capabilities at once) at
given moment of time. 

 \item {\bf Control measuring capabilities of given resource.}

Application should provide facility to start, stop, pause and resume monitoring of given resource's capability. This
includes also definition of value gathering interval.

 \item {\bf List all capability values from given, started measurement.}

After starting measurement user should be able to view all values of given capability (in context of resource). This
includes all values since measurement was started, with on-line update in case of pending measurement.

 \item {\bf Visualize measurement results.}

User should be able to select measurement and plot results on graph. User should be able to choose at least few type of
graphs. Each graph should be able to render results from multiple measurements. Plots should be updated on-line with
capability values of pending measurements.

\end{itemize}


\subsection{Nonfunctional Requirements}
\label{subsec:NonFunctionalRequirements}


\begin{itemize}
 \item {\bf Usability.}

It is most important nonfunctional requirement - user interface should be as much user-friendly as it's possible. User
shouldn't loose his or hers time on learning how application actual works. Each function should be just in the place,
where casual user will expect it to be.

 \item {\bf Reliability.}

Application cannot have any critical bug that can cause crash. Application's failure, cannot lead to data loss.

 \item {\bf Scalability.}

User should be able to work with wide variety of environments - from single process running on single host, up to
highly distributed application running on several clusters containing vast amount of computing units.

 \item {\bf Interoperability.}

Application should operate on most currently available platforms: Linux, Windows or MacOS X.

 \item {\bf Driven by Open Source.}

To allow extend of application's life cycle, it's development should be based on open source resources.

 \item {\bf Well documented.}

Extensive documentation is crucial to allow other developers contributing to the project.

\end{itemize}

